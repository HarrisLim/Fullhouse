<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
	<mapper namespace="com.team.station4.map">
		<resultMap type="Price" id="PriceResult">
			<result property="priceno" column="PRICENO" />
			<result property="lease" column="LEASE" />
			<result property="salePrice" column="SALEPRICE" />
			<result property="monthly" column="MONTHLY" />
			<result property="deposit" column="DEPOSIT" />
			<result property="build_no" column="BUILD_NO" />
		</resultMap>
		
		<resultMap id="Build" type="Build">
			<result property="build_no" column="BUILD_NO" />
			<result property="address" column="ADDRESS"/>
			<result property="buildType" column="BUILDTYPE" />
			<result property="proType" column="PROTYPE" />
			<result property="wholeFloor" column="WHOLEFLOOR" />
			<result property="floor" column="FLOOR" />
			<result property="jArea" column="JAREA" />
			<result property="gArea" column="GAREA" />
			<result property="view_count" column="VIEW_COUNT" />
			<result property="picPath" column="PICPATH" />
			<result property="reservation_time" column="RESERVATION_TIME" />
			<result property="lat" column="LAT" />
			<result property="lng" column="LNG" />
			<result property="roomTitle" column="ROOMTITLE" />
			<result property="explainText" column="EXPLAINTEXT" />
			<result property="privateMemo" column="PRIVATEMEMO" />
			<result property="buildState" column="BUILDSTATE" />
			<result property="bu_rdate" column="BU_RDATE" />
			<result property="st_no" column="ST_NO" />
			<result property="estate_no" column="ESTATE_NO" />
			<result property="mem_no" column="MEM_NO" />
			<collection property="priceDTO" javaType="java.util.ArrayList" resultMap="Price"> </collection>
		</resultMap>
		<!-- jsl -->
		<insert id="myInsert" parameterType="Build"> <!-- 로그인 정보가 아직 없으니까 null처리, reservation_time은 방등록할 때 하는 것이 아니라, room.do에서 하는 것이니까 초기값은 null  -->
			insert into BUILDING values (BUILD_NO_SEQ.nextval, #{address}, #{buildType}, #{proType}, #{wholeFloor}, #{floor}, #{jArea}, #{gArea}, 0, #{picPath}, null, #{lat}, #{lng}, #{roomTitle}, #{explainText}, #{privateMemo}, #{buildState}, SYSDATE, null, null, null)
		</insert>
		<select id="myNo" resultType="int">
			select max(build_no) from BUILDING	
		</select>
		<select id="mySelectEstate" resultType="Build" parameterType="Map">
			select * from(select A.*, ROWNUM rn from(select * from BUILDING NATURAL JOIN PRICE where estate_no=#{buildDTO.estate_no} order by BUILD_NO desc)A)where rn between #{start} and #{last}
		</select>
		<select id="mySearchNoSelect" resultType="Build" parameterType="Build">
			select * from(select A.*, ROWNUM rn from(select * from BUILDING NATURAL JOIN PRICE where estate_no=#{buildDTO.estate_no} 
			<choose>
				<when test="theNum != 0">
					and build_no like #{theNum}||'%'
				</when>
			</choose>
			<choose> 
				<when test="buildState == 0">
					and buildState between 1 and 4
				</when>
				<otherwise>
					and buildState=#{buildState}
				</otherwise>
			</choose> 
			order by BUILD_NO desc)A)where rn between #{start} and #{last} 
		</select>
		<select id="mySearchTitleSelect" resultType="Build" parameterType="Build">
			select * from(select A.*, ROWNUM rn from(select * from BUILDING NATURAL JOIN PRICE where estate_no=#{buildDTO.estate_no} and ROOMTITLE like '%'||#{theTitle}||'%'
			<choose> 
				<when test="buildState == 0">
					and buildState between 1 and 4
				</when>
				<otherwise>
					and buildState=#{buildState}
				</otherwise>
			</choose> 
			order by BUILD_NO desc)A)where rn between #{start} and #{last} 
		</select>
		<select id="mySearchMemoSelect" resultType="Build" parameterType="Build">
			select * from(select A.*, ROWNUM rn from(select * from BUILDING NATURAL JOIN PRICE where estate_no=#{buildDTO.estate_no} and PRIVATEMEMO like '%'||#{theMemo}||'%'
			<choose> 
				<when test="buildState == 0">
					and buildState between 1 and 4
				</when>
				<otherwise>
					and buildState=#{buildState}
				</otherwise>
			</choose> 
			order by BUILD_NO desc)A)where rn between #{start} and #{last}
		</select>
		<update id="myUpdatePrivateMemo" parameterType="Map">
			update BUILDING set PRIVATEMEMO=#{privateMemo} where BUILD_NO=#{build_no}
		</update>
		<delete id="myDelete" parameterType="int">
			delete from BUILDING where BUILD_NO=#{build_no}
		</delete>
		<select id="myCountBuild" parameterType="Map" resultType="int">
			select count(*) from BUILDING where estate_no=1
			<choose>
				<when test="buildState == 1">
					AND BUILDSTATE=1
				</when>
				<when test="buildState == 2">
					AND BUILDSTATE=2
				</when>
				<when test="buildState == 3">
					AND BUILDSTATE=3
				</when>
				<when test="buildState == 4">
					AND BUILDSTATE=4
				</when>
			</choose>
			<choose>
				<when test="theNum == 0">
					
				</when>
				<when test="theNum != null and theTitle == null and theMemo == null">
					and build_no like #{theNum}||'%'
				</when>
				<when test="theNum == null and theTitle != null and theMemo == null">
					and ROOMTITLE like '%'||#{theTitle}||'%'
				</when>
				<when test="theNum == null and theTitle == null and theMemo != null">
					and PRIVATEMEMO like '%'||#{theMemo}||'%'
				</when>
			</choose>
		</select>
		<select id="selectDeleteList" parameterType="Map" resultType="Build">
			select BUILD_NO from BUILDING where ST_NO=#{st_no} and ESTATE_NO=#{estate_no}
		</select>
		<delete id="deleteAddinfo" parameterType="Build">
			delete from ADDINFO where build_no=#{build_no}
		</delete>
		<delete id="deletePrice" parameterType="Build">
			delete from PRICE where build_no=#{build_no}
		</delete>
		<delete id="deleteRequest" parameterType="Build">
			delete from REQUEST where build_no=#{build_no}
		</delete>
		<delete id="deleteReservation" parameterType="Build">
			delete from RESERVATION where build_no=#{build_no}
		</delete>
		<delete id="deleteBuilding" parameterType="Map">
			delete from BUILDING where ST_NO=#{st_no} and ESTATE_NO=${estate_no}
		</delete>
		<delete id="deleteStaff" parameterType="Map">
			delete from STAFF where ST_NO=#{st_no} and ESTATE_NO=${estate_no}
		</delete>
		<select id="selectBuildRequest" parameterType="int" resultType="build">
			select * from building where estate_no = #{estate_no}
		</select>
		
		
		
		<select id="mySelect" parameterType="Map" resultType="Build"> 
			select * from(
			select ads.*, ROWNUM rn from(
			select a.build_no, a.address, a.proType, a.wholeFloor, a.floor, a.jArea, a.gArea, a.view_count, a.lat, a.lng, a.picPath, a.roomTitle, a.explainText, a.privateMemo, b.deposit, b.salePrice, 
			b.monthly, b.lease, a.estate_no, c.parking, c.animal, a.BUILDTYPE from 
			BUILDING a, PRICE b, ADDINFO c where a.build_no(+)=b.build_no and a.build_no = c.build_no and b.build_no = c.build_no AND a.LNG between #{west} and #{east} order by a.BUILD_NO desc) ads 
			where LAT between #{south} and #{north}
			<!-- 오피스텔, 아파트, 원룸 등 방 종류 -->
			<if test="proType != null and proType != '전체' ">
				AND PROTYPE=#{proType}
			</if>
			
			<!-- 매물 종류 -->
			<choose>
			<when test="buildType != null and buildType == '월세' ">
				 AND BUILDTYPE=1
			</when>
			<when test="buildType != null and buildType == '전세' ">
				 AND BUILDTYPE=2
			</when>
			<when test="buildType != null and buildType == '매매' ">
				 AND BUILDTYPE=3
			</when>
			<when test="buildType != null and buildType == '월세or전세' ">
				 AND BUILDTYPE=4
			</when>
			</choose>
			
			<!-- 거래 종류 -->			
			<choose>
				<when test="kind_of_trade != null and kind_of_trade == '중개' ">
					 AND ESTATE_NO between 1 and 999999
				</when>
				<when test="kind_of_trade != null and kind_of_trade == '직거래' ">
					 AND MEM_NO between 1 and 999999
				</when>

			</choose>
			
			<!-- 보증금 -->	
			<if test="beginDeposit != null and endDeposit != null" >
				AND DEPOSIT between #{beginDeposit} and #{endDeposit}
			</if>
			
			<!-- 월세-->	
			<if test="beginRent != null and endRent != null" >
				AND MONTHLY between #{beginRent} and #{endRent}
			</if>
			
			<!-- 주차 -->	
			<if test="parking != null" >
				AND PARKING = #{parking}
			</if>
			
			<!-- 반려동물 -->	
			<if test="animal != null " >
				AND ANIMAL = #{animal}
			</if>
			
			<!-- 층수 -->	
			<if test="startFloor != null and endFloor != null" >
				AND FLOOR between #{startFloor} and #{endFloor}
			</if>
			
			<!-- 전용면적 -->	
			<if test="startArea != null and endArea != null" >
				AND GAREA between #{startArea} and #{endArea}
			</if>
			)where rn between #{start} and #{last}
		</select>

		<select id="myLocation" resultType="Build">
			select LAT, LNG from BUILDING
		</select>
		
		<select id="myLatLng" parameterType="HashMap" resultType="Build">
			select LAT, LNG from BUILDING where ADDRESS like '%'||#{서울}||'%'
		</select>
		
		<select id="myCountCluster" parameterType="Map" resultType="int" >
			select count(*) from(select * from BUILDING NATURAL JOIN PRICE NATURAL JOIN ADDINFO where LNG between #{west} and #{east})A where LAT between #{south} and #{north}
			<!-- 오피스텔, 아파트, 원룸 등 방 종류 -->
			<if test="proType != null and proType != '전체' ">
				AND  PROTYPE=#{proType}
			</if>
			
			<!-- 매물 종류 -->
			<choose>
			<when test="buildType != null and buildType == '월세' ">
				 AND  BUILDTYPE=1
			</when>
			<when test="buildType != null and buildType == '전세' ">
				 AND  BUILDTYPE=2
			</when>
			<when test="buildType != null and buildType == '매매' ">
				 AND  BUILDTYPE=3
			</when>
			<when test="buildType != null and buildType == '월세or전세' ">
				 AND  BUILDTYPE=4
			</when>
			</choose>
			
			<!-- 거래 종류 -->			
			<choose>
				<when test="kind_of_trade != null and kind_of_trade == '중개' ">
					 AND  ESTATE_NO between 1 and 999999
				</when>
				<when test="kind_of_trade != null and kind_of_trade == '직거래' ">
					 AND  MEM_NO between 1 and 999999
				</when>

			</choose>
			
			<!-- 보증금 -->	
			<if test="beginDeposit != null and endDeposit != null" >
				AND DEPOSIT between #{beginDeposit} and #{endDeposit}
			</if>
			
			<!-- 월세-->	
			<if test="beginRent != null and endRent != null" >
				AND MONTHLY between #{beginRent} and #{endRent}
			</if>
			
			<!-- 주차 -->	
			<if test="parking != null" >
				AND PARKING = #{parking}
			</if>
			
			<!-- 반려동물 -->	
			<if test="animal != null " >
				AND ANIMAL = #{animal}
			</if>
			
			<!-- 층수 -->	
			<if test="startFloor != null and endFloor != null" >
				AND FLOOR between #{startFloor} and #{endFloor}
			</if>
			
			<!-- 전용면적 -->	
			<if test="startArea != null and endArea != null" >
				AND GAREA between #{startArea} and #{endArea}
			</if>
			
		</select>
		
		<select id="myClusterList" parameterType="Map" resultType="Build" >
			select * from(select * from BUILDING NATURAL JOIN PRICE NATURAL JOIN ADDINFO where LNG between #{west} and #{east})A where LAT between #{south} and #{north}
			<!-- 오피스텔, 아파트, 원룸 등 방 종류 -->
			<if test="proType != null and proType != '전체' ">
				AND  PROTYPE=#{proType}
			</if>
			
			<!-- 매물 종류 -->
			<choose>
			<when test="buildType != null and buildType == '월세' ">
				 AND  BUILDTYPE=1
			</when>
			<when test="buildType != null and buildType == '전세' ">
				 AND  BUILDTYPE=2
			</when>
			<when test="buildType != null and buildType == '매매' ">
				 AND  BUILDTYPE=3
			</when>
			<when test="buildType != null and buildType == '월세or전세' ">
				 AND  BUILDTYPE=4
			</when>
			</choose>
			
			<!-- 거래 종류 -->			
			<choose>
				<when test="kind_of_trade != null and kind_of_trade == '중개' ">
					 AND  ESTATE_NO between 1 and 999999
				</when>
				<when test="kind_of_trade != null and kind_of_trade == '직거래' ">
					 AND  MEM_NO between 1 and 999999
				</when>

			</choose>
			
			<!-- 보증금 -->	
			<if test="beginDeposit != null and endDeposit != null" >
				AND DEPOSIT between #{beginDeposit} and #{endDeposit}
			</if>
			
			<!-- 월세-->	
			<if test="beginRent != null and endRent != null" >
				AND MONTHLY between #{beginRent} and #{endRent}
			</if>
			
			<!-- 주차 -->	
			<if test="parking != null" >
				AND PARKING = #{parking}
			</if>
			
			<!-- 반려동물 -->	
			<if test="animal != null " >
				AND ANIMAL = #{animal}
			</if>
			
			<!-- 층수 -->	
			<if test="startFloor != null and endFloor != null" >
				AND FLOOR between #{startFloor} and #{endFloor}
			</if>
			
			<!-- 전용면적 -->	
			<if test="startArea != null and endArea != null" >
				AND GAREA between #{startArea} and #{endArea}
			</if>
			
		</select>
		
		<!-- 	멤버 테이블의 찜목록 등록 업데이트 쿼리문	추후 세션으로 로그인 정보가 들어오면 mem_email 부분은 변수 처리 필요  parameter 도 HashMap 으로 변경 필요 -->
		<update id="myMemHotUpdate" parameterType="HashMap" >
			update MEMBER set HOT = concat((select HOT from MEMBER where MEM_EMAIL = #{email}), ','||#{buildNo}) where  MEM_EMAIL = #{email}
		</update>
		
		<!-- 	멤버 테이블의 찜목록 삭제 업데이트 쿼리문	추후 세션으로 로그인 정보가 들어오면 mem_email 부분은 변수 처리 필요 parameter 도 HashMap 으로 변경 필요  buildNo 는  HOT column 에 들어있는 매물 번호 값-->
		<update id="myMemHotDelete" parameterType="HashMap" >
			update MEMBER set HOT = (select replace(HOT, ','||#{buildNo}, '') from MEMBER where MEM_EMAIL = #{email}) where MEM_EMAIL = #{email}
		</update>
		
		<!-- 	찜 목록 삭제 업데이트를 위한 멤버 테이블의 찜목록 값 확인 -->
		<select id="myHotSelect" parameterType="HashMap" resultType="int">
			select count(*) from MEMBER where MEM_EMAIL =#{email} AND HOT like '%'||','||#{buildNo}||'%'
		</select>
		
		<!-- 	관심목록 - 찜한 방  리스트 뽑기를 위한 멤버 테이블의 찜목록 값 확인 -->
		<select id="myHot" parameterType="HashMap" resultType="String">
			select HOT from MEMBER where MEM_EMAIL = #{email}
		</select>
		
		<!-- 	관심목록 - 찜한 방  리스트 뽑기 -->
		<select id="myHotListPaging" parameterType="HashMap" resultType="Build">
			select * from (select A.*, ROWNUM rn from(select * from BUILDING where 1=1 and BUILD_NO in
<!-- 			<if test="list != null"> -->
				<foreach item="list" index="index" collection="list"
					open = "(" separator="," close=")">
				 		#{list}
				 </foreach>
<!-- 			 </if> -->
			order by BUILD_NO desc)A) where rn between #{start} and #{last}
			 
		</select>
		
		<!-- 	관심목록 - 찜한 방  리스트 뽑기 -->
		<select id="myHotList" parameterType="int" resultType="Build">
			select * from BUILDING where BUILD_NO = #{parseInt}
		</select>
		
		<!-- 	멤버 테이블의 최근 본 매물 등록 업데이트 쿼리문	추후 세션으로 로그인 정보가 들어오면 mem_email 부분은 변수 처리 필요  parameter 도 HashMap 으로 변경 필요 -->
		<update id="myMemRecentUpdate" parameterType="HashMap" >
			update MEMBER set RECENTLIST=#{build_no} where MEM_EMAIL = #{email}
		</update>
		
		
		<!-- 	찜 목록 삭제 업데이트를 위한 멤버 테이블의 찜목록 값 확인 -->
		<select id="myRecentSelect" parameterType="HashMap" resultType="int">
				select count(*) from MEMBER where MEM_EMAIL = #{email} AND RECENTLIST like '%'||','||#{build_no}||'%'
<!-- 				select count(RECENTLIST) from MEMBER where MEM_EMAIL = '1234@gmail.com'  -->
		</select>
		
		<!-- 	관심목록 - 찜한 방  리스트 뽑기를 위한 멤버 테이블의 최근 본 매물 값 확인 -->
		<select id="myRecent" parameterType="String" resultType="String">
			select RECENTLIST from MEMBER where MEM_EMAIL = #{email}
		</select>
		
		<!-- 	관심목록 - 찜한 방  리스트 뽑기 -->
		<select id="myRecentList" parameterType="int" resultType="Build">
			select * from BUILDING where BUILD_NO = #{parseInt}
		</select>
		
		<!-- 	Build_no로 price 뽑기 -->
		<select id="myPriceSelect" parameterType="Build" resultType="Price">
			select * from PRICE where BUILD_NO = #{build_no}
		</select>
		

		
		
	</mapper>